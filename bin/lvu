#!/bin/bash
############################################################
#                                                          #
# lvu - view Lunar module information                      #
#                                                          #
############################################################
# Original gaze written by Brian Peterson                  #
# Copyright 2001 by Brian Peterson                         #
############################################################
# gaze is part of the sorcery spell management utility     #
# This version contains none of Brian Peterson's source    #
# Copyright 2001 by Kyle Sallee                            #
############################################################
#                                                          #
# this WAS the gaze script of a source based Linux distro, #
# calls Sorcerer GNU/Linux, or SGL. SGL is no longer       #
# available with GPL license. Since this script was taken  #
# before licensing scheme change, no legal problems I      #
# guess.                                                   #
#                                                          #
# the code is re-written for Lunar. The previous Copyright #
# notices are kept; just in case some code is left :=)     #
# Kagan Kongar <kongar@tsrsb.org.tr>, 20020519             #
#                                                          #
############################################################
#                                                          #
# Parts Copyrighted Jason Johnston 2002 under GPLv2        #
# Parts Copyrighted Kagan Kongar 2002 under GPLv2          #
# Parts Copyrighted Auke Kok 2003 under GPLv2              #
#                                                          #
############################################################

help() {
cat << EOF
LVU -- Lunar View utility (for viewing just about everything in Lunar-Linux)

Usage:		lvu [general options] [command [command parameters]]

GENERAL OPTIONS:

-d  |  --debug                  Enables debug messages
-h  |  --help                   Displays this help text
-v  |  --verbose                Increases the level of message output

Commands:

Invoke lvu with desired command followed by arguments.
Please note that anything in brackets [ ] is optional.

Command     Arguments      Description

what        module         display a module's description
short       module         display a module's short description
where       module         display a module's section
cd          module         change directory to module and execs a new shell
alien                      discover untracked files
from        path/file      discover what installed a given file
leafs                      display installed modules that have no explicit
                               dependencies on them
orphans                    display installed modules that are missing
                               dependencies
held                       display held modules
exiled                     display exiled modules

search      "phrase"       searches all modules long descriptions for phrase.
service     port|acronym   displays modules that provide that service

website     module         display a module's website
install     module         display an install log
size        [module]       find and show installed size of a module
                               or ALL (slow)
installed   [module]       display installed modules/version of module
compile     module         display a compile log
compiler    module         display the compiler version used
links       module         display a list of modules that this module links to
sources     [module]       display source files for a module
urls        [module]       display all URLs for a module
maintainer  module         display maintainer for a module
version     module         display version of module in moonbase

sum         [module]       display checksums
md5sum      [module]       display md5sums

export                     make snapshot of box's configuration.
import      snapshot       restores an exported snapshot.

section     [section]      display moonbase sections
moonbase                   display text listing of the moonbase
html                       display html listing of the moonbase
updatelog                  display summary log of previous lunar update
activity                   display main log file

newer       20030801       display available modules newer than Aug 01, 2003
older       20030101       display modules installed before Jan 01, 2003

voyeur      [delay|module] peak into module compilation

pam                        display installed modules that are Linux-PAM aware

depends     module         displays installed modules that explicitly or
                               recursively depend on this module.
tree        module         displays a tree of the module's dependencies
stree       module         same as 'tree' but highly abbreviated
eert        module         same as 'tree' but reverse and installed deps only
leert       module         full reverse dependency tree

\$MODULE_SCRIPT module      will print the module script for that module
EOF
}


export_snapshot()  {
  SOURCE_DIRECTORY=$BUILD_DIRECTORY/snapshot
  mk_source_dir          $SOURCE_DIRECTORY
  cp  -a  /etc           $SOURCE_DIRECTORY
  cp  -a  $CONFIG_CACHE  $SOURCE_DIRECTORY

  for  LINE  in  $(cat  $MODULE_STATUS) ;  do
    MODULE=$(echo  $LINE  |  cut  -d  :  -f1)
     STATUS=$(echo  $LINE  |  cut  -d  :  -f2)
    if  [  "$STATUS"  ==  "installed"  ];  then
      echo  $MODULE  >>  /usr/src/snapshot/install
    fi
  done

  SNAPSHOT="/root/snapshot-$HOSTNAME-$(date  -u  +%Y%m%d).tar.bz2"

  cd  $BUILD_DIRECTORY
  tar    -c  snapshot     |
  bzip2  -9  >  $SNAPSHOT
  rm_source_dir          $SOURCE_DIRECTORY
  echo  "$SNAPSHOT created."
}


import_snapshot()  {
          SNAPSHOT=$1
  SOURCE_DIRECTORY=$BUILD_DIRECTORY/snapshot

  if  [  -f  "$1"  ];  then
    cd  $BUILD_DIRECTORY
    mk_source_dir          $SOURCE_DIRECTORY

    bzcat $SNAPSHOT  |  tar  -x
    cd  $SOURCE_DIRECTORY

    for  LINE  in  $(cat  install);  do
      push_install_queue  $LINE
    done
    report  $INSTALL_QUEUE  "Install Queue"

    cp  -ai  local  /etc/lunar
    cp  -ai  etc    /

    cd  /
    rm_source_dir  $SOURCE_DIRECTORY

  else
    message  "Unable to find snapshot  \"$SNAPSHOT\""
    false
  fi
}


checksum() {
  for FILE in $(cat $1 | files) ; do
    sum -s  $FILE
  done
}


md5sum_files() {
  for FILE in $(cat $1 | files) ; do
    md5sum  $FILE
  done
}


alien() {

  message  "In a few minutes I will print files found on this disk"
  message  "that were not installed by lunar.  This is not a"
  message  "security feature!  Files could still be lurking"
  message  "undetected on this box."

  rm    -f  /tmp/lvu.found
  rm    -f  /tmp/lvu.known

  message  "Discovering ambient files..."
  find  $TRACKED  |  files  |  filter  "$EXCLUDED"  |  sort  >/tmp/lvu.found
 
  message  "Discovering installed files..."
  cat  $INSTALL_LOGS/*  |  files  |  sort  >  /tmp/lvu.known

  diff  -B  -a  -d  /tmp/lvu.found  /tmp/lvu.known  |
  grep  -v  "^> "                                     |
  grep      "^< "                                     |
  cut  -c  3-                                         |
  filter  "$PROTECTED"

  rm  -f  /tmp/lvu.found
  rm  -f  /tmp/lvu.known

}


lvu_catalog()  {
  echo  "Lunar Moonbase for $(date  -u)"

  ((  COUNT=0  ))

  for  SECTION  in  $(list_sections);  do
    echo 
    echo  "-------------------------------------------------"
    echo  "SECTION:  $SECTION"  
    echo  "-------------------------------------------------"
    for  MODULE  in  $(list_modules $SECTION);  do
      echo  $MODULE
      ((  COUNT++  ))
    done
  done

  echo
  echo  "Total modules:  $COUNT"
}


lvu_catalog_html()  {

  echo  "<html><head><title>Lunar Moonbase for $(date  -u)</title>"
  echo  "<meta http-equiv=\"Pragma\" content=\"no-cache\"></head>"
  echo  "<body>"

  echo  "<table align=\"center\" border=5>"

  echo  "<tr><th colspan=5><font color=maroon size=+1>"
  echo  "Lunar Moonbase<br>$(date  -u)"
  echo  "</font></th></tr>"

  echo  "<tr>"
  echo  "<th>Module</th>"
  echo  "<th>Version</th>"
  echo  "<th>Updated</th>"
  echo  "<th>Website</th>"
  echo  "<th>Maintainer</th>"
  echo  "</tr>"

  ((  COUNT=0  ))

  for  SECTION  in  $(list_sections);  do
    ((  SECTION_COUNT=0 ))
    echo  "<tr><th colspan=5><font color="maroon">$SECTION</font></th></tr>"
    for  MODULE  in  $(list_modules $SECTION);  do
      (
        run_details $MODULE &> /dev/null
        echo  "<tr>"
        if  [  "$MODULE"  ==  "linux"  ]   ||
            [  "$MODULE"  ==  "glibc"  ];  then
            BOLD="<b>"
          UNBOLD="</b>"
        else
          unset    BOLD
          unset  UNBOLD
        fi
        if  [  ${#MODULE}  -gt  15  ];  then
          MODULE="<font size=-1>$MODULE</font>"
        fi
        echo  "<td>$BOLD $MODULE $UNBOLD</td>"
        echo  "<td><font size=-1>$BOLD $VERSION $UNBOLD</font></td>"
        echo  "<td><font size=-1>$UPDATED</font></td>"

        WEBSITE=$WEB_SITE
        if    [  ${#WEB_SITE}  -lt 20  ];  then
            SHRINK="<font size=-1>"
          UNSHRINK="</font>"
        elif  [  ${#WEB_SITE}  -lt 30  ];  then
            SHRINK="<font size=-2>"
          UNSHRINK="</font>"
        else
           WEBSITE="$(echo  $WEB_SITE  |  cut  -c-30)..."
            SHRINK="<font size=-3>"
          UNSHRINK="</font>"
        fi

        if  [  "$WEB_SITE"  !=  "unknown"  ];  then
          echo  "<td> $SHRINK"
          echo  "<a href=\"$WEB_SITE\" target=\"_blank\">$WEBSITE</a>"
          echo  "$UNSHRINK </td>"
        else
          echo  "<td></td>"
        fi

        if  [  -z  "$MAINTAINER"  ];  then
          MAINTAINER="maintainer@lunar-linux.org"
        fi

        echo  "<td><font size=-1>"
        echo  "<a href=\"mailto:$MAINTAINER\">$MAINTAINER</a>"
        echo  "</font></td>"
        echo  "</tr>"
      )
      ((  COUNT++  ))
      ((  SECTION_COUNT++ ))
    done
    echo "<tr><th colspan=5>Modules in $SECTION section: $SECTION_COUNT</th></tr>"
  done

  echo  "<tr><th colspan=5>Total modules: $COUNT</th></tr>"
  echo  "</table></body></html>"
}


newer()  {
  [ -z "$1" ] && return 1      
  DATE=$1
  [ "$DATE" -lt "20010101" ] && return 1        
  [ "$DATE" -gt "20310101" ] && return 1
  for MODULE in $(list_moonbase) ; do
    run_details $MODULE
    if [ $ENTERED -gt $DATE ] ; then
      echo $MODULE
    fi
  done
}


older()  {
  [ -z "$1" ] && return 1      
  DATE=$1
  [ "$DATE" -lt "20010101" ] && return 1        
  [ "$DATE" -gt "20310101" ] && return 1        
  for  LINE  in $(cat $MODULE_STATUS_BACKUP) ; do
    LIN_DATE=$(echo  $LINE  |  cut  -d  :  -f2)
    if  [  $LIN_DATE  -gt  $DATE  ]  2>/dev/null;  then
      true
    else
      echo  $LINE  |  cut  -d  :  -f1
    fi
  done
}


show_module_component()  {
  COMPONENT=$1
     MODULE=$2
    SECTION=$(find_section $MODULE)
  if [ -e $MOONBASE/$SECTION/$MODULE/$COMPONENT ] ; then
    cat $MOONBASE/$SECTION/$MODULE/$COMPONENT
  fi
}


find_active_lin()  {
  for FILE in $(ls /var/lock/installing.* 2>/dev/null) ; do
    if [ -d /proc/$(cat $FILE) ] ; then
      echo $FILE | sed "s:/var/lock/installing.::"
      return  0
    fi
  done
  false
}


follow_active_lin()  {
  if [ -f /var/lock/installing.$1 -a -d /proc/$(cat /var/lock/installing.$1) ] ; then
    if  [ -f /tmp/lunar.lin.$(cat /var/lock/installing.$1).$1.compile-log.* ] ; then
      tail -f /tmp/lunar.lin.$(cat /var/lock/installing.$1).$1.compile-log.* --follow=name --pid=$(cat /var/lock/installing.$1)  2>/dev/null
    fi
  fi
}


voyeur()  {
  if [ -n "$1" ] && ! find_section $1 > /dev/null ; then
    (( DEFAULT_DELAY = $1 * 60 ))
    shift  1
  fi

  for MODULE in $@ ; do
    follow_active_lin $MODULE
  done

  DEFAULT_DELAY=${DEFAULT_DELAY:=60}

  while true ; do
    if ! ACTIVE_MODULE=$(find_active_lin) ; then
      message  "${MESSAGE_COLOR}Waiting ${DEFAULT_DELAY} seconds for a lin to begin.${DEFAULT_COLOR}"
      for (( DELAY=DEFAULT_DELAY ; DELAY > 0 ; DELAY-- )); do
        if ACTIVE_MODULE=$(find_active_lin) ; then
          break
        else
          sleep 1
        fi
      done
    fi

    if [ -z "$ACTIVE_MODULE" ] ; then
      break
    else
      follow_active_lin $ACTIVE_MODULE
    fi
  done
}


show_leafs()  {
  for  MODULE  in  $(cat  $MODULE_STATUS  |  cut  -d :  -f1) ;  do
    if    !  cut  -d :  -f2-  $DEPENDS_STATUS  |
             grep             "^$MODULE:"       |
             grep  -q         ":on:"
    then     echo   $MODULE
    fi
  done
}


show_orphans()  {
  for MODULE in $(grep :installed: $MODULE_STATUS | cut -d: -f1 | sort | uniq) ; do
    debug_msg "checking \"$MODULE\""
    for LINE in $(grep "^${MODULE}:" $DEPENDS_STATUS) ; do
      DEPENDS=$(echo $LINE | cut -d: -f2)
      OPTIONAL=$(echo $LINE | cut -d: -f4)
      if ! module_installed $DEPENDS ; then
        if [ "$OPTIONAL" == "required" ]; then
          echo "$MODULE: $DEPENDS is missing"
	fi
      fi
    done
  done
}


show_depends()  {
  if  !  echo  "$DONE"  |  grep  -q  "$1";  then
    DONE="$DONE  $1"

    for  LINE  in  $(grep  ":$1:"  $DEPENDS_STATUS) ; do
       MODULE=$(echo  $LINE  |  cut  -d :  -f1)
      STATUS=$(echo  $LINE  |  cut  -d :  -f3)

      if    [  "$STATUS"  ==  "on"  ]
      then  echo          $MODULE
            show_depends  $MODULE
      fi

    done
  fi
}


# function: show_tree
# usage: show_tree <module>
# purpose: show a tree of the module's dependencies (recursive)
function show_tree() {
  debug_msg "show_tree ($@)"

  # create dependency tracking file if needed
  if [ -z "$TMP_SEEN" ] ; then
    export TMP_SEEN=$(temp_create "seen")
    export FLAG=1
    trap "rm -f $TMP_SEEN ; exit" INT TERM KILL
  fi

  run_depends() {
    # local definitions
    function depends() {
      debug_msg "depends ($@)"
      echo "+$1"
    }

    optional_depends() {
      debug_msg "optional_depends ($@)"
      echo "-$1"
    }
    
    debug_msg "run_depends ($@)"
    SECTION=$(grep "^$1:" $MODULE_INDEX | cut -d: -f2)
    CPU_ARCH=$(uname -m | sed 's/i[456]86/i386/')
    if [ -f $MOONBASE/$SECTION/$1/DEPENDS.$CPU_ARCH ] ; then
      . $MOONBASE/$SECTION/$1/DEPENDS.$CPU_ARCH
    elif [ -f $MOONBASE/$SECTION/$1/DEPENDS ] ; then
      . $MOONBASE/$SECTION/$1/DEPENDS
    fi
  }
 
  if [ -z "$1" ] ; then
    help
    exit 1
  fi

  # gather dependencies, sorted by 1) required, 2) optional, and
  # alphabetically too
  unset ALL
  DEPS=$(run_depends $1 | sort | uniq)
  for DEP in $DEPS ; do
    if [ ${DEP:0:1} == "+" ] ; then
      ALL="$DEP $ALL"
    else
      ALL="$ALL $DEP"
    fi
  done
  DEPS=$ALL

  # show hit list:
  if [ "$CUR" == "-" ] ; then
    if module_installed $1 ; then
      RES="${MODULE_COLOR}[$1]${DEFAULT_COLOR}: "
    else
      if [ -n "$SHORTTREE" ] ; then
        return
      fi
      RES="${LRM_COLOR}[$1]${DEFAULT_COLOR}: "
    fi
  else
    RES="${MODULE_COLOR}$1${DEFAULT_COLOR}: "
  fi

  if [ -n "$DEPS" -o -z "$SHORTTREE" ] ; then
    # show all deps on the same line:
    for DEP in $DEPS ; do
      MOD=${DEP:1}
      case "${DEP:0:1}" in
        # required
        +)
          if module_installed $MOD ; then
            COL="${FILE_COLOR}"
          else
            COL="${PROBLEM_COLOR}"
          fi
          RES="$RES${COL}$MOD${DEFAULT_COLOR} "
        ;;
        # optional
        -)
          if module_installed $MOD ; then
            COL="${FILE_COLOR}"
          else
            COL="${LRM_COLOR}"
          fi
          RES="$RES${COL}[$MOD]${DEFAULT_COLOR} "
        ;;
      esac
    done
    RES="${INDENT}|--->${RES}"
    echo -e "${RES:5}"
  fi

  # I (sofar) suck:
  for DEP in $DEPS ; do
    LASTDEP=${DEP:1}
  done

  INDENT="$INDENT|    "
  # and recurse:
  for DEP in $DEPS ; do
    grep -q "^$DEP$" $TMP_SEEN
    TEST=$?
    if [ "$TEST" == "1" -o -z "$SHORTTREE" ] ; then
      echo "$DEP" >> $TMP_SEEN
      CUR=${DEP:0:1}
      # note the FLAG= thingy here
      FLAG= show_tree ${DEP:1}
    fi
  done
  # don't try this at home:
  INDENT=${INDENT:0:((${#INDENT}-5))}

  if [ -n "$FLAG" ] ; then
    temp_destroy $TMP_SEEN
    unset TMP_SEEN
  fi
}


show_eert() {
  # yup, here we go again:
  run_depends() {
    # local definitions
    function depends() {
      debug_msg "depends ($@)"
      echo "+$1"
    }

    optional_depends() {
      debug_msg "optional_depends ($@)"
      echo "-$1"
    }
    
    debug_msg "run_depends ($@)"
    SECTION=$(grep "^$1:" $MODULE_INDEX | cut -d: -f2)
    CPU_ARCH=$(uname -m | sed 's/i[456]86/i386/')
    if [ -f $MOONBASE/$SECTION/$1/DEPENDS.$CPU_ARCH ] ; then
      . $MOONBASE/$SECTION/$1/DEPENDS.$CPU_ARCH
    elif [ -f $MOONBASE/$SECTION/$1/DEPENDS ] ; then
      . $MOONBASE/$SECTION/$1/DEPENDS
    fi
  }

  # this is tricky, so lets not make any mistakes:
  if [ -z "$TMP_DEPLIST" ] ; then
    FLAG=1
    TMP_DEPLIST=$(temp_create "all-dependencies")
    trap "rm -f $TMP_DEPLIST ; exit" INT KILL TERM
    # fill the tree
    if [ -n "$SHORTTREE" ] ; then
      # short: whatever is in the depends db
      cat $DEPENDS_STATUS | sed -e 's/:optional:/:-:/g' -e 's/:required:/:+:/g' | awk -F: '{print $1":"$4$2}' > $TMP_DEPLIST
    else
      # long: gather ALL dependencies, no matter installed, held or not
      for MODULE in $(list_moonbase) ; do
        run_depends $MODULE | while read DEP ; do
          echo "$MODULE:$DEP" >> $TMP_DEPLIST
        done
      done
    fi
  fi

  show_rtree() {
    # we need to do an reverse tree for $1
    RDEPS=$(grep ":[+-]$1$" $TMP_DEPLIST | cut -d: -f1 | sort | uniq)

    if module_installed $1 ; then
      STR="${INDENT}^----${MODULE_COLOR}$1${DEFAULT_COLOR}: "
    else
      STR="${INDENT}^----${PROBLEM_COLOR}$1${DEFAULT_COLOR}: "
    fi
    
    for DEP in $RDEPS ; do
      CUR=$(grep "^$DEP:[+-]$1" $TMP_DEPLIST | cut -d: -f2 | uniq)
      CUR=${CUR:0:1}
      if [ "$CUR" == "+" ] ; then
        if module_installed $DEP ; then
          STR="$STR${FILE_COLOR}$DEP ${DEFAULT_COLOR}"
        else
          STR="$STR${PROBLEM_COLOR}$DEP ${DEFAULT_COLOR}"
        fi
      else
        if module_installed $DEP ; then
          STR="$STR${FILE_COLOR}[$DEP] ${DEFAULT_COLOR}"
        else
          STR="$STR${LRM_COLOR}[$DEP] ${DEFAULT_COLOR}"
        fi

      fi
    done

    echo -e "${STR:5}"

    INDENT="$INDENT|    "
    for RDEP in $RDEPS ; do
      FLAG= show_rtree $RDEP
    done
    INDENT="${INDENT:0:((${#INDENT}-5))}"
  }

  show_rtree $1

  if [ -n "$FLAG" ] ; then
    temp_destroy $TMP_DEPLIST
  fi
}


show_urls() { (
  # function overrides:
  call_wget() { echo $@ ; }
  guess_filename() { false ; }
  file() { return ; }
  mv() { return ; }
  get_cvs() { return ; }
  testpack() { return ; }
  connect() { return ; }
 
  SILENT=on
  VERBOSE=off
  FUZZY=off
  EXHAUSTIVE=off
  CLEAR_CACHE=off

  if [ -z "$1" ] ; then
    MODULES=$(list_moonbase|sort)
  else
    MODULES=$1
  fi
  
  for MODULE in $MODULES ; do
    download_module $MODULE
  done
) }


main()  {
  case $1 in
    html)
      lvu_catalog_html
      ;;
      
    export)
      export_snapshot
      ;;
      
    import)
      import_snapshot $2
      ;;
      
    section)
      if [ -n "$2" ] ; then
        list_modules $2
      elif [ -z "$2" ] ; then
	list_sections
      fi
      ;;
      
    alien)
      alien
      ;;

    from)
      cd $INSTALL_LOGS
      grep $2 *
      ;;
      
    newer)
      newer $2
      ;;
      
    older)
      older $2
      ;;
      
    moonbase)
      lvu_catalog | view_file
      ;;

    leafs)
      show_leafs | sort | uniq
      ;;
      
    orphans)
      show_orphans
      ;;
      
    updatelog)
      if [ -e /var/log/lunar/update ]; then
        view_file /var/log/lunar/update
      else
        echo "No update log available."
      fi
      ;;

    activity)
      if [ -e $ACTIVITY_LOG ]; then
        view_file $ACTIVITY_LOG
      else
        echo "No update log available."
      fi
      ;;

    installed)
      if [ -z "$2" ] ; then
        view_file $MODULE_STATUS
      elif [ -n "$(installed_version $2)" ] ; then
        echo "$(installed_version $2)"
      else
        message "$2 is not installed"
	false
      fi
      ;;

    held)
      grep ":held:" $MODULE_STATUS | cut -d: -f1
      ;;

    exiled)
      grep ":exiled:" $MODULE_STATUS | cut -d: -f1
      ;;
		
    sum)
      if [ -n "$2" ] ; then
        if ! checksum  "$INSTALL_LOGS/$2-$(installed_version $2)" ; then
          checksum  "$INSTALL_LOGS/*"
	fi
      fi
      ;;
	  
    md5sum)
      mod_v_safe_edit $2
      if [ -n "$2" ] ; then
        if ! md5sum_files "$INSTALL_LOGS/$MOD_V_SNAME-$(installed_version $2)" ; then
	  md5sum_files  "$INSTALL_LOGS/*"
        fi
      fi
      ;;

    voyeur)
      shift 1
      voyeur $@
      ;;

    pam)
      find_pam_aware
      ;;
     
    sources)
      sources $2
      ;;

    urls)
      show_urls $2
      ;;

    maintainer)
      if run_details $2 ; then
        if [ -n "$MAINTAINER" ] ; then  
          echo $MAINTAINER
        else
          echo maintainer@lunar-linux.org
        fi
      fi
      ;;
      
    DETAILS)
      show_module_component $1 $2
      ;;
      
    DEPENDS)
      show_module_component $1 $2
      ;;
      
    CONFIGURE)
      show_module_component $1 $2
      ;;
      
    CONFLICTS)
      show_module_component $1 $2
      ;;
      
    PRE_BUILD)
      show_module_component $1 $2
      ;;
      
    BUILD)
      show_module_component $1 $2
      ;;
      
    POST_BUILD)
      show_module_component $1 $2
      ;;
      
    POST_INSTALL)
      show_module_component $1 $2
      ;;
      
    PRE_REMOVE)
      show_module_component $1 $2
      ;;
      
    POST_REMOVE)
      show_module_component $1 $2
      ;;
      
    search)
      cat $MODULE_INDEX | grep -v 'MOONBASE_MD5' | while read ENTRY ; do
        MOD=$(echo $ENTRY | cut -d: -f1)
	SEC=$(echo $ENTRY | cut -d: -f2)
        echo $MOONBASE/$SEC/$MOD/DETAILS
      done | xargs egrep -l -i "$2" | sed "s;${MOONBASE}/\(.*\)/DETAILS;\1;"
      ;;
      
    service)
      cat $MODULE_INDEX | grep -v 'MOONBASE_MD5' | while read ENTRY ; do
        MOD=$(echo $ENTRY | cut -d: -f1)
	SEC=$(echo $ENTRY | cut -d: -f2)
	if [ -f $MOONBASE/$SEC/$MOD/services ] ; then
	  echo $MOONBASE/$SEC/$MOD/services
	fi
      done | xargs egrep -l -i "$2" | sed "s;${MOONBASE}/\(.*\)/services;\1;"
      ;;
      
    depends)
      show_depends "$2" | sort | uniq
      ;;
      
    website)
      if [ -z "$2" ] ; then
        return 1
      else
        if run_details $2 ; then
          if [ -n "$WEB_SITE" ] ; then
            echo $WEB_SITE
          else
            echo "http://www.lunar-linux.org"
	  fi
        fi
      fi
      ;;
      
    version)
      if [ -n "$2" ] ; then
        if run_details $2 ; then
  	  echo $VERSION
	fi
      fi
      ;;

    versions)
      if [ -n "$2" ] ; then
        if run_details $2 ; then
  	  echo "main-version $VERSION"
	fi
	if  [ $(echo $MOONBASE/*/$2/*/DETAILS | wc -w) -lt 2 ] ; then
	  message "${MESSAGE_COLOR} This module has no alt-versions${DEFAULT_COLOR}"
	  exit 1
	fi
	for i in $MOONBASE/*/$2/*/DETAILS ; do
	  x=`echo $i | sed 's:/DETAILS::'`
	  run_details $2/`basename $x`
	  echo "alt-version  $VERSION"
	done

      fi
      ;;

    size)
      if [ -z "$2" ] ; then
        MODULES=$(cat $MODULE_STATUS | cut -d: -f1 | sort)
        for MODULE in $MODULES ; do
          echo $MODULE $(find_module_size $MODULE)
        done
      else
        if module_installed $2 ; then
          find_module_size $2
        else
          message "${PROBLEM_COLOR}$MODULE not installed${DEFAULT_COLOR}"
        fi
      fi
      ;;
      
    tree)
      show_tree "$2"
      ;;

    stree)
      SHORTTREE=1
      show_tree "$2"
      ;;
      
    eert)
      SHORTTREE=1
      show_eert "$2"
      ;;

    leert)
      show_eert "$2"
      ;;

    compile)
      mod_v_safe_edit $2
      run_details $2 ; 
        if [ -f $COMPILE_LOGS/$MOD_V_SNAME-$(lvu version $2).bz2 ] ; then
          view_file $COMPILE_LOGS/$MOD_V_SNAME-$(lvu version $2).bz2
        else
          VERSION=$(installed_version $2)
          view_file $COMPILE_LOGS/$MOD_V_SNAME-$(installed_version $2).bz2 \
             "Compile log for $2 does not exist"
        fi
      #fi
      ;;
	      
   install)
     mod_v_safe_edit $2
     if run_details $2 ; then
       view_file $INSTALL_LOGS/$MOD_V_SNAME-$(installed_version $2) \
           "Install log for $2 does not exist"
     fi
     ;;

   compiler)
     if [ ! -z "$2" ] ; then
       if run_details $2 ; then
         if [ ! -e $INSTALL_LOGS/$2-$(installed_version $2) ] ; then 
           echo "Install log for $2 does not exist" 
           return 1
         else
           cat $INSTALL_LOGS/$2-$(installed_version $2) | while read LINE ; do
             if file $LINE | grep -q "ELF " ; then
               echo -n "$LINE "
               strings -a $LINE | grep GCC: | sort -r | head -n 1
             fi  
           done
         fi
       fi
     fi
     ;;

   links)
     [[ -z "$2" ]] && return 1

     REGEX=""
     for LINK in `lvu install $2 | xargs file | awk -F: '/ELF/ { print $1 }' | xargs ldd | egrep -v ':$' | cut -d' ' -f3 | sort | uniq`
     do
	 if [[ -z $REGEX ]]
	 then
	 	REGEX="($LINK)"
	 else
	 	REGEX="${REGEX}|($LINK)"
	 fi
     done

     pushd $INSTALL_LOGS >/dev/null
     egrep -l "$REGEX" *
     popd >/dev/null
     ;;
     
   what)
     if [ ! -z "$2" ] ; then
       if run_details $2 ; then
         run_module_file $2 DETAILS
       fi
     fi
     ;;

   short)
     if [ ! -z "$2" ] ; then
       if run_details $2 ; then
         echo "$SHORT"
       fi
     fi
     ;;
	   
   where)
     if [ ! -z "$2" ] ; then
       if run_details $2 ; then
         echo $(find_section $2)
       fi
     fi
     ;;

   cd)
     if [ ! -z "$2" ] ; then
       if run_details $2 ; then
         cd $MOONBASE/$(find_section $2)/$2
         $SHELL
       fi
     fi
     ;;

   *)
     help
     ;;

   esac
 
}



. /etc/lunar/config

GETOPT_ARGS=$(getopt -q -n lvu -o "dhv" -l "debug,help,verbose" -- "$@")

if [ -z "$?" ] ; then
  help | view_file
  exit
else
  eval set -- $GETOPT_ARGS
  export IFS="$STANDARD_IFS"
  
  set_priority
  
  while true ; do
    case "$1" in
      -d|--debug       ) (( LUNAR_DEBUG++ )) ; export LUNAR_DEBUG ; shift   ;;
      -h|--help        ) help ; exit                                        ;;
      -v|--verbose     ) export VERBOSE="on" ;                      shift   ;;
      --) shift ; break ;;
      *) help ; break ;;
    esac
  done

  main $@
fi



