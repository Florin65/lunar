############################################################
#                                                          #
# This code is written for Lunar Linux, see                #
# http://www.lunar-linux.org                               #
#                                                          #
############################################################
#                                                          #
# $FUNCTIONS/modules                                       #
# includes create_module_index, find_section               #
#          list_sections, list_modules                     #
#          get_moonbase_md5, set_moonbase_md5,             #
#          check_module_index, run_details                 #
# 20020528                                                 #
#                                                          #
############################################################
#                                                          #
# Copyrighted Kagan Kongar 2002 under GPLv2                #
# Portions Copyrighted Chuck Mead 2002 under GPLv2         #
#                                                          #
############################################################

# function : list_sections
# usage    : list_sections
# purpose  : list the moonbase sections, filter out the specific files
list_sections() {
   check_module_index                                        &&
   SECTIONS=`grep -v ^MOONBASE_MD5 $MODULE_INDEX  2>/dev/null | \
             cut -d : -f 2-2                                  | \
             sort                                             | \
             uniq`
   [ -n "$SECTIONS" ] && echo "$SECTIONS" && return 0

   SECTIONS=`ls  $MOONBASE       | \
             grep -v "ChangeLog" | \
             grep -v "CVS"       | \
             grep -v "COPYING"   | \
             grep -v "LICENSE"   | \
             grep -v "README"`
   [ -n "$SECTIONS" ] && echo "$SECTIONS" && return 0

   return 1
}

# function : list_modules
# usage    : list_modules $SECTION
# purpose  : list the modules in a section, filter out the specific files
list_modules() {
   [ -z "$1" ]        && return_error "no SECTION defined!"      $FUNCNAME

   MODULES=`grep ":$1\$" $MODULE_INDEX 2>/dev/null | cut -d : -f 1-1 | sort`

   [ -n "$MODULES" ] && echo "$MODULES" && return 0

   check_module_index                                  &&
   MODULES=`grep ":$1\$" $MODULE_INDEX 2>/dev/null | cut -d : -f 1-1 | sort`

   [ -n "$MODULES" ] && echo "$MODULES" && return 0

   for  MODULE  in  `ls $MOONBASE/$SECTION 2>/dev/null | \
                     grep -v "ChangeLog"               | \
                     grep -v "CVS"                     | \
                     grep -v "COPYING"                 | \
                     grep -v "LICENSE"                 | \
                     grep -v "README"`
   do
      echo "$MODULE" 
   done
  return 0
}

# function : set_moonbase_md5
# usage    : set_moonbase_md5
# purpose  : creates the md5 value of overall moonbase
set_moonbase_md5()
{
   MOONBASE_MD5=`echo $MOONBASE/*/* | md5sum | cut -d "-" -f 1-1`
   echo $MOONBASE_MD5
}


# function : get_moonbase_md5
# usage    : get_moonbase_md5
# purpose  : graps the MOONBASE_MD5 line from the $MODULE_INDEX
get_moonbase_md5() 
{
   MOONBASE_MD5=`grep ^MOONBASE_MD5: $MODULE_INDEX 2>/dev/null | \
                 cut -d : -f 2-2`
   [ -z "$MOONBASE_MD5" ] && MOONBASE_MD5="0"
   echo "$MOONBASE_MD5"
}

# function: create_module_index
# usage   : create_module_index
# purpose : created an index file of module:section pair list
create_module_index()
{
   remove_module_index()
   {
      lock_file $MODULE_INDEX
      [ -f "$MODULE_INDEX" ] && cp $MODULE_INDEX /tmp && rm $MODULE_INDEX 2>/dev/null
      unlock_file $MODULE_INDEX
   }

   MODULE_INDEX=${MODULE_INDEX:=/var/state/lunar/module.index}
   remove_module_index

   lock_file $MODULE_INDEX || return 1

   echo MOONBASE_MD5:`set_moonbase_md5` > $MODULE_INDEX
   for  SECTION  in  $(list_sections) ; do
      for  MODULE  in  $(list_modules $SECTION) ;  do
         echo $MODULE:$SECTION >> $MODULE_INDEX
       done
    done
   unlock_file $MODULE_INDEX
}  

# function: check_module_index
# usage   : check_module_index
# purpose : checks if the index is up-to-date regarding to moonbase
function check_module_index()
{
  [ `get_moonbase_md5` != `set_moonbase_md5` ] &&
  [ "$UID" == "0" ]                            &&
  create_module_index                          &&
  return 0
  return 1
}

# function : find_section
# usage    : find_section "module name"
# purpose  : finds the section of a given module as parameter
find_section()  
{
  SECTION=`grep ^$1: $MODULE_INDEX 2>/dev/null | head -n 1 | cut -d : -f 2-2`
  [ -n "$SECTION" ] && echo "$SECTION" && return 0

  check_module_index                                  &&
  SECTION=`grep ^$1: $MODULE_INDEX 2>/dev/null | head -n 1 | cut -d : -f 2-2` 
  [ -n "$SECTION" ] && echo "$SECTION"  && return 0 
           
  for  SECTION  in  $(list_sections) ; do
     for  MODULE  in  $(list_modules $SECTION) ; do
        [ "$1" == "$MODULE" ] && echo "$SECTION" && return 0
     done
  done
  return 1
}

# function : run_details
# usage    : run_details |module_name| ($MODULE is pre-defined or param)
# purpose  : runs the DETAILS file of a module
run_details() {

   [ -z "$MODULE" ] && [ -z "$1" ] && return 1
   [ -n "$1" ] && MODULE="$1"

   [ -s "$MOONBASE/`find_section $MODULE`/$MODULE/DETAILS" ] || {
      message  "${PROBLEM_COLOR}Unable to find module"    \
               "${MODULE_COLOR}${MODULE}${DEFAULT_COLOR}"  \
               "${MESSAGE_COLOR}in ${FILE_COLOR}$MOONBASE${DEFAULT_COLOR}"
      return 1
   }

   SCRIPT_DIRECTORY=$MOONBASE/`find_section $MODULE`/$MODULE
   . $SCRIPT_DIRECTORY/DETAILS &>/dev/null &&
   return 0        
}

# function : run_module_file
# usage    : run_module_file <script_name> SCRIPT_DIRECTORY MUST be predefined
# purpose  : runs the given script for a pre-defined module
run_module_file()
{
   [ "$VERBOSE" == "on" ] && echo "  Running $MODULE $1 file"
   [ -z "$SCRIPT_DIRECTORY" ]  && {
      [ "$VERBOSE" == "on" ] && echo "SCRIPT_DIRECTORY undefined"
      return 1
   }

   [ -s "$SCRIPT_DIRECTORY/$1" ] || {
      [ "$VERBOSE" == "on" ] && echo "    $1 does not exist"
      return 1
   }
   [ "$TEST" != "on" ] && . $SCRIPT_DIRECTORY/$1 > /dev/null
}

