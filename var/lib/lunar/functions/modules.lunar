############################################################
#                                                          #
# This code is written for Lunar Linux, see                #
# http://www.lunar-linux.org                               #
#                                                          #
############################################################
#                                                          #
# $FUNCTIONS/modules                                       #
# includes create_module_index, find_section               #
#          list_sections, list_modules, list_installed     #
#          get_moonbase_md5, set_moonbase_md5,             #
#          check_module_index, run_details                 #
#          module_installed, module_held, module_exiled    #
#          hold_modules, unhold_modules                    #
# 20020528                                                 #
# 20030113 merging more functions in here - sofar          #
# 20030417 adding hold routines - sofar                    #
#                                                          #
############################################################
#                                                          #
# Copyrighted Kagan Kongar 2002 under GPLv2                #
# Portions Copyrighted Chuck Mead 2002 under GPLv2         #
# Portions Copyrighted Auke Kok 2003 under GPLv2           #
#                                                          #
############################################################


# function : list_sections
# usage    : list_sections
# purpose  : list the moonbase sections, filter out the specific files
list_sections() {
   check_module_index                                        &&
   SECTIONS=`grep -v ^MOONBASE_MD5 $MODULE_INDEX  2>/dev/null | \
             cut -d : -f 2-2                                  | \
             sort                                             | \
             uniq`
   [ -n "$SECTIONS" ] && echo "$SECTIONS" && return 0

   SECTIONS=`ls  $MOONBASE       | \
             grep -v "ChangeLog" | \
             grep -v "CVS"       | \
             grep -v "COPYING"   | \
             grep -v "LICENSE"   | \
             grep -v "README"`
   [ -n "$SECTIONS" ] && echo "$SECTIONS" && return 0

   return 1
}


# function : list_modules
# usage    : list_modules $SECTION
# purpose  : list the modules in a section, filter out the specific files
list_modules() {
  if [ -z "$1" ] ; then
    message "${PROBLEM_COLOR}list_modules(): no SECTION defined!${DEFAULT_COLOR}" 
    exit 1
  fi

   for  MODULE  in  `ls $MOONBASE/$1 2>/dev/null | \
                     grep -v "ChangeLog"               | \
                     grep -v "CVS"                     | \
                     grep -v "COPYING"                 | \
                     grep -v "LICENSE"                 | \
                     grep -v "README"`
   do
      echo "$MODULE" 
   done
   return 0
}

# function : list_moonbase
# usage    : list_moonbase
# purpose  : returns the names of all modules in moonbase
list_moonbase() {
  for SECTION in $(list_sections) ; do
    list_modules $SECTION
  done				
}


# function : list_installed
# usage    : list_installed
# purpose  : return a list of installed (or held) modules
list_installed() {
  grep -e ":installed:" -e ":held:" $MODULE_STATUS
}

# function : set_moonbase_md5
# usage    : set_moonbase_md5
# purpose  : creates the md5 value of overall moonbase
set_moonbase_md5() {
  MOONBASE_MD5=`echo $MOONBASE/*/* | md5sum | cut -d "-" -f 1-1`
  echo $MOONBASE_MD5
}


# function : get_moonbase_md5
# usage    : get_moonbase_md5
# purpose  : graps the MOONBASE_MD5 line from the $MODULE_INDEX
get_moonbase_md5() {
  MOONBASE_MD5=`grep ^MOONBASE_MD5: $MODULE_INDEX | tail -1 2>/dev/null | \
                cut -d : -f 2-2`
  if [ -z "$MOONBASE_MD5" ] ; then
    MOONBASE_MD5="0"
  fi
  echo "$MOONBASE_MD5"
}


# function: create_module_index
# usage   : create_module_index
# purpose : created an index file of module:section pair list
create_module_index() {
  lock_file $MODULE_INDEX || return 1

  if [ -f "$MODULE_INDEX" ] ; then
    cp $MODULE_INDEX /tmp
    rm -f $MODULE_INDEX 2>/dev/null
  fi

  echo MOONBASE_MD5:`set_moonbase_md5` > $MODULE_INDEX
  for  SECTION  in  $(list_sections) ; do
    list_modules $SECTION | sed "s/$/:$SECTION/" >> $MODULE_INDEX
  done
  unlock_file $MODULE_INDEX
}  


# function: check_module_index
# usage   : check_module_index
# purpose : checks if the index is up-to-date regarding to moonbase
function check_module_index() {
  if [ `get_moonbase_md5` != `set_moonbase_md5` ] ; then
    create_module_index
    return 0
  else
    return 1
  fi
}


# function : find_section
# usage    : find_section "module name"
# purpose  : finds the section of a given module as parameter
find_section() {
  local SECTION

  SECTION=$(grep ^$1: $MODULE_INDEX 2>/dev/null | head -n 1 | cut -d: -f2)
  if [ -n "$SECTION" ] ; then
    if [ -d $MOONBASE/$SECTION/$1 ] ; then
      echo "$SECTION"
      return 0
    fi
  fi

  check_module_index

  SECTION=$(grep ^$1: $MODULE_INDEX 2>/dev/null | head -n 1 | cut -d: -f2)
  if [ -n "$SECTION" ] ; then
    if [ -d $MOONBASE/$SECTION/$1 ] ; then
      echo "$SECTION"
      return 0
    fi
  fi
           
  for SECTION in $(list_sections) ; do
    if [ -n "$(list_modules $SECTION | grep ^$MODULE$ )" ] ; then
      echo "$SECTION"
      return 0
    fi
  done

  return 1
}


# function : run_details
# usage    : run_details |module_name| ($MODULE is pre-defined or param)
# purpose  : runs the DETAILS file of a module
run_details() {

  [ -z "$MODULE" ] && [ -z "$1" ] && return 1
  [ -n "$1" ] && MODULE="$1"

  local SECTION=$(find_section $MODULE)
  [ -d "$MOONBASE/$SECTION/$MODULE" ] || {
     message  "${PROBLEM_COLOR}Unable to find module"    \
              "${MODULE_COLOR}${MODULE}${DEFAULT_COLOR}"  \
              "${PROBLEM_COLOR}in ${FILE_COLOR}$MOONBASE${DEFAULT_COLOR}"
     return 1
  }

  [ -f "$MOONBASE/$SECTION/$MODULE/DETAILS" ] || {
     message  "${PROBLEM_COLOR}Module ${MODULE_COLOR}${MODULE}" \
              "${DEFAULT_COLOR}${PROBLEM_COLOR}has no ${FILE_COLOR}DETAILS" \
              "${DEFAULT_COLOR}${PROBLEM_COLOR}file!${DEFAULT_COLOR}"
     return 1
  }
   
  SCRIPT_DIRECTORY=$MOONBASE/$SECTION/$MODULE
  . $SCRIPT_DIRECTORY/DETAILS &>/dev/null &&
  SOURCE_DIRECTORY=${SOURCE_DIRECTORY:-$BUILD_DIRECTORY/$MODULE-$VERSION}

  return 0        
}


# function : run_module_file
# usage    : run_module_file <script_name> SCRIPT_DIRECTORY MUST be predefined
# purpose  : runs the given script for a pre-defined module
run_module_file() {
  [ -z "$SCRIPT_DIRECTORY" ]  && return 1
  [ -s "$SCRIPT_DIRECTORY/$1" ] || return 1
  verbose_msg "running \"$MODULE\" \"$1\" file"
  [ "$TEST" != "on" ] && . $SCRIPT_DIRECTORY/$1 > /dev/null
}


# function : module_installed
# usage    : module_installed $MODULE
# purpose  : check if $MODULE is installed (or held)
module_installed()
{
  $(cat $MODULE_STATUS | cut -d: -f1,3 | grep -q -e "^$1:installed" -e "^$1:held")
}


# function : module_held
# usage    : module_held $MODULE
# purpose  : check if $MODULE is held
module_held() {
  $(cat $MODULE_STATUS | cut -d: -f1,3 | grep -q "^$1:held")
}


# function : module_exiled
# usage    : module_exiled $MODULE
# purpose  : check if $MODULE is exiled
module_exiled() {
  $(cat $MODULE_STATUS | cut -d: -f1,3 | grep -q "^$1:exiled")
}


# function : installed_version
# usage    : installed_version $MODULE
# purpose  : return the installed version of $MODULE
installed_version() {
  grep "^$1:" $MODULE_STATUS | cut -d: -f4 
}


# function : hold_modules
# usage    : hold_modules $MODULE [$MODULE....]
# purpose  : put modules on hold
hold_modules() {
  if [ -n "$1" ] ; then
    lock_file $MODULE_STATUS_BACKUP
    lock_file $MODULE_STATUS
    for MODULE in "$@" ; do
      grep -v "^$MODULE:" $MODULE_STATUS > $MODULE_STATUS_BACKUP
      grep "^$MODULE:" $MODULE_STATUS | sed "s:installed:held:" >> $MODULE_STATUS_BACKUP
      cp $MODULE_STATUS_BACKUP $MODULE_STATUS
    done
    unlock_file $MODULE_STATUS
    unlock_file $MODULE_STATUS_BACKUP
  fi
}


# function : unhold_modules
# usage    : unhold_modules $MODULE [$MODULE....]
# purpose  : put modules on hold back to normal
unhold_modules () {
  if [ -n "$1" ] ; then
    lock_file $MODULE_STATUS_BACKUP
    lock_file $MODULE_STATUS
    for MODULE in "$@" ; do
      grep -v "^$MODULE:" $MODULE_STATUS > $MODULE_STATUS_BACKUP
      grep "^$MODULE:" $MODULE_STATUS | sed "s:held:installed:" >> $MODULE_STATUS_BACKUP
      cp $MODULE_STATUS_BACKUP $MODULE_STATUS
    done
    unlock_file $MODULE_STATUS
    unlock_file $MODULE_STATUS_BACKUP
  fi

}
