#!/bin/bash
#                                                          #
# build.lunar - building routines                          #
#                                                          #
############################################################
#                                                          #
# this WAS the subroutines of a source based Linux distro, #
# calls Sorcerer GNU/Linux, or SGL. SGL is no longer       #
# available with GPL license. Since this script was taken  #
# before licensing scheme change, no legal problems I      #
# guess.                                                   #
#                                                          #
# the code is re-written for Lunar. The previous Copyright #
# notices are kept; just in case some code is left :=)     #
# Kagan Kongar <kongar@tsrsb.org.tr>, 20020519             #
#                                                          #
############################################################
#                                                          #
# Copyright 2001 by Kyle Sallee                            #
#                                                          #
# Parts Copyrighted Hendrik Visage 2002 under GPLv2        #
#                                                          #
# Parts Copyrighted Kagan Kongar 2002 under GPLv2          #
#                                                          #
# Parts Copyrighted Steven Michalske 2004 under GPLv2      #
#                                                          #
############################################################


save_libraries()  {
  debug_msg "save_libraries ($@)"

  [ "$MODULE" == "glibc" ] && return 0

  OLD_VERSION=`installed_version  $MODULE`
  OLD_LOG=$INSTALL_LOGS/$MODULE-$OLD_VERSION

  [ -e "$OLD_LOG" ] || return 0      

  OLD_LIBS=$SOURCE_DIRECTORY/old.libraries
  mkdir  -p  $OLD_LIBS

  SAVED=$OLD_LIBS/$MODULE.saved.libraries
  rm  -rf  $SAVED

  grep   "/lib/"  $OLD_LOG  |
  while  read  LINE;  do

    if [ -f "$LINE"  ]  &&
         file  -bL  $LINE   |
         grep  -q   "shared object"
    then
      verbose_msg "saving library \"$LINE\""
      if  [  -h  $LINE  ];  then
        DEST=$(  basename  $(  ls   -la  "$LINE"  |
                               cut  -d  '>'  -f2  |
                               cut  -c  2-
                            )
              )
        ln  -sf  $DEST  $OLD_LIBS/`basename  $LINE`
      else
        cp  $LINE  $OLD_LIBS
      fi
      echo  $OLD_LIBS/`basename  $LINE`  >>  $SAVED
    fi
  done

  ldconfig  $OLD_LIBS

  if  [  -z   "$LD_LIBRARY_PATH"  ]
  then  export  LD_LIBRARY_PATH="$OLD_LIBS"
  else  export  LD_LIBRARY_PATH="$OLD_LIBS:$LD_LIBRARY_PATH"
  fi
}


release_saved_libraries()  {
  debug_msg "release_saved_libraries ($@)"
  OLD_LIBS=$SOURCE_DIRECTORY/old.libraries
  SAVED=$OLD_LIBS/$MODULE.saved.libraries

  if [ -f $SAVED ] ; then
    while read FILE ; do
      verbose_msg "releasing library \"$FILE\""
      rm -f "$FILE"
    done < $SAVED
  fi

  ldconfig $OLD_LIBS
}


export_ld()  {
  debug_msg "export_ld ($@)"
  for DIRECTORY in $* ; do
    if file -b $DIRECTORY/*.so* | grep  -q  "shared object" ; then
      if [ -z "$LD_LIBRARY_PATH" ] ; then
        export LD_LIBRARY_PATH="$DIRECTORY"
      else
        export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$DIRECTORY"
      fi
    fi
  done
}


prepare_install() {
  debug_msg "prepare_install ($@)"
  if  module_installed $MODULE  || module_held $MODULE ; then
    message  "${MESSAGE_COLOR}Preparing to install"  \
             "${MODULE_COLOR}${MODULE}${DEFAULT_COLOR}"

    while  boost_locked;  do
      sleep  5
    done

    echo  $$  >  $BOOST_LOCK

    save_libraries
    verbose_msg "calling \"lrm --keepconfig --nosustain $MODULE\""
    lrm  --keepconfig  --nosustain  $MODULE
    true
  fi
}


default_pre_build() {
  debug_msg "default_pre_build ($@)"
  verbose_msg "running \"default_pre_build\""
  validate_source_dir  $SOURCE_DIRECTORY 
  if [[ -d $SOURCE_DIRECTORY ]] &&
     [[ $KEEP_SOURCE == "on" ]]; then
    cd $SOURCE_DIRECTORY && 
    make clean
    if [ $? -ne 0 ]; then
      message "${PROBLEM_COLOR}ERROR: ${DEFAULT_COLOR}The source for ${MODULE_COLOR}$MODULE${DEFUALT_COLOR}: could not be made clean for build."
      # Thoughts on forcing a new source directory?
      # More of how should we handle this, currently we will bail out
      # A vast majority of the moonbase will fail,  (w/o: make clean)
    fi
  else
    mk_source_dir        $SOURCE_DIRECTORY &&
    unpack               $SOURCE
  fi
}


default_config() {
  debug_msg "default_config ($@)"
  verbose_msg "running \"default_config\""

  verbose_msg "CFLAGS=\"$CFLAGS\""            &&
  verbose_msg "OPTS=\"$OPTS\""                &&
  verbose_msg "./configure --build=$BUILD --prefix=$MODULE_PREFIX --sysconfdir=/etc --localstatedir=/var --infodir=$MODULE_PREFIX/share/info --mandir=$MODULE_PREFIX/share/man $OPTS"

  ./configure  --build=$BUILD                      \
               --prefix=$MODULE_PREFIX             \
               --sysconfdir=/etc                   \
               --localstatedir=/var                \
               --infodir=$MODULE_PREFIX/share/info \
               --mandir=$MODULE_PREFIX/share/man   \
               $OPTS
} > $C_FIFO 2>&1


default_cvs_config() {
  debug_msg "default_cvs_config ($@)"
  verbose_msg "running \"default_cvs_config\""
  verbose_msg "CFLAGS=\"$CFLAGS\""            &&
  verbose_msg "OPTS=\"$OPTS\""                &&
  verbose_msg "./autogen.sh --build=$BUILD --prefix=$MODULE_PREFIX --sysconfdir=/etc --localstatedir=/var --infodir=$MODULE_PREFIX/share/info --mandir=$MODULE_PREFIX/share/man $OPTS"

  ./autogen.sh --build=$BUILD                      \
               --prefix=$MODULE_PREFIX             \
               --sysconfdir=/etc                   \
               --localstatedir=/var                \
               --infodir=$MODULE_PREFIX/share/info \
               --mandir=$MODULE_PREFIX/share/man   \
               $OPTS
} > $C_FIFO 2>&1


default_make() {
  debug_msg "default_make ($@)"
  verbose_msg "running \"default_make\""
  # This code is simular to the optimize_make function from optimize.lunar
  # This is needed because bash does not expand aliases in functions
  if module_installed openmosix-tools ; then
    if [[ "$MAKES" > 1 ]] ; then
      mosrun -h make -j$MAKES
    else
      mosrun -h make
    fi
  elif [[ $MAKES > 1 ]] ; then
    make -j$MAKES
  else
    make
  fi                                 &&
  prepare_install                    &&
  make install
} > $C_FIFO 2>&1


default_build() {
  debug_msg "default_build ($@)"
  verbose_msg "running \"default_build\""
  default_config  &&
  default_make
} > $C_FIFO 2>&1


default_cvs_build() {
  debug_msg "default_cvs_build ($@)"
  default_cvs_config  &&
  default_make
} > $C_FIFO 2>&1


default_cpan_pre_build() {
  debug_msg "default_cpan_pre_build ($@)"
  mk_source_dir $SOURCE_DIRECTORY
  cd $SOURCE_DIRECTORY
  CPAN_MODULE=${SOURCE_URL/cpan:\/\//}
  CPAN_SOURCE_BRANCH=$(dirname $CPAN_MODULE)
  mkdir -p authors/id/${CPAN_SOURCE_BRANCH}
  install -m 444 $SOURCE_CACHE/$SOURCE authors/id/${CPAN_SOURCE_BRANCH}
}


default_cpan_build() {
  debug_msg "default_cpan_build ($@)"
  prepare_install
  verbose_msg "running \"default_cpan_build\""
  if [ ! -x /usr/bin/cpan ] ; then
    return 1
  fi
  
  CPAN_MODULE=${SOURCE_URL/cpan:\/\//}
  echo "o conf cpan_root $STATE_DIRECTORY
        o conf build_dir $SOURCE_DIRECTORY
        o conf keep_source_where $SOURCE_DIRECTORY
	install $CPAN_MODULE
	quit" | /usr/bin/cpan || exit 1
  RESULT=$?
  rm_source_dir $SOURCE_DIRECTORY

} > $C_FIFO 2>&1


default_post_build() {
  debug_msg "default_post_build ($@)"
  {
    gather_docs

    install_pam_confs
    install_services
    install_xinetd_confs
    install_bashmisc
  } | tee -a $C_LOG
  
  install_initd

  devoke_installwatch
  ldconfig
  release_saved_libraries
  cd  /
}


syms_not_owned()  {
  debug_msg "syms_not_owned ($@)"

  cat  $1  |
  while read ITEM ; do

    if  [  -h  "$ITEM"  ]   &&
        [  -f  "$ITEM"  ];  then

      DEST=$(  basename  $(  ls   -la  "$ITEM"  |
                             cut  -d  '>'  -f2  |
                             cut  -c  2-
                          )
            )

      if  !  grep  -q  "$DEST"  "$1"
      then   echo  -n  "$ITEM\|"
             echo      "$ITEM"  >>  /tmp/$MODULE.rejected.symlinks
      fi

    fi

  done

}


prepare_module_config()  {
  debug_msg "prepare_module_config ($@)"
  if [ ! -x "$MODULE_CONFIG" ] ; then
    touch $MODULE_CONFIG
    chmod a+x $MODULE_CONFIG
  fi
}


# run the CONFIGURE script
run_configure() {
  mod_v_safe_edit $MODULE
  debug_msg "run_configure ($@)"
  if [ -n "$RECONFIGURE" ];  then
    verbose_msg "Reconfiguring \"$MOD_V_SNAME\""
    rm -f $DEPENDS_CONFIG/$MOD_V_SNAME
    remove_depends $MODULE
  fi

  prepare_module_config

  if ! use_xinetd ; then
    if [ -n "$RECONFIGURE" ] || ! grep -q INITDSCRIPTS $MODULE_CONFIG ; then
      use_initd
    fi
  fi
  grep -q "^"$MODULE"\$" $TEMP_PREPAREDDEPS 2>/dev/null && return 0

  # add custom passed OPTS before retreiving them
  if [ -n "$PASS_OPTS" ] ; then
    OPTS="$(get_module_config OPTS) $PASS_OPTS"
    set_module_config OPTS "$OPTS"
  fi
  run_module_file $MODULE CONFIGURE
}


run_pre_build() {
  debug_msg "run_pre_build ($@)"
  message "${MESSAGE_COLOR}Building ${MODULE_COLOR}$MODULE${DEFAULT_COLOR}"

  cd $BUILD_DIRECTORY

  if verify_all_sources $MODULE ; then
    if [ -s $SCRIPT_DIRECTORY/PRE_BUILD ] ; then
      run_module_file $MODULE PRE_BUILD
    else
      if ! default_pre_build ; then
        return 1
      fi
    fi
  else
    return 1
  fi
}


run_build()  {
  debug_msg "run_build ($@)"
  if [ -d "$SOURCE_DIRECTORY" ] ; then
    cd $SOURCE_DIRECTORY
  fi

  verbose_msg "building \"$MODULE\" version \"$VERSION\" in `pwd`"
  
  if [ -x ./configure ] || [ -x ./src/configure ] ; then
    if [ -f /var/lib/lunar/localsaconfig ]; then
      if [ -f /var/cache/config/$MODULE ] ; then
        message "${MESSAGE_COLOR}These are your current -- config options for module ${MODULE_COLOR}$MODULE"
        message "${FILE_COLOR}(/var/cache/config/$MODULE)"
        cat /var/cache/config/$MODULE
      fi
	  
      if query "Do you wish to add -- options to ./configure?" n ; then
        edit_file /var/cache/config/$MODULE
        OPTS="$OPTS $(cat /var/cache/config/$MODULE)"
        message "${MESSAGE_COLOR} OPTS= ${MODULE_COLOR}$OPTS"
      fi
    fi
  fi

  if [ -s $SCRIPT_DIRECTORY/BUILD ] ; then
    run_module_file $MODULE BUILD
  else
    default_build
  fi

}


run_post_build() {
  debug_msg "run_post_build ($@)"
  if [ -s $SCRIPT_DIRECTORY/POST_BUILD ] ; then
    run_module_file $MODULE POST_BUILD
  fi
  default_post_build
}


run_post_install() {
  debug_msg "run_post_install ($@)"
  # keep a record of the module scripts used for every install
  (
    if [ ! -e /var/state/lunar/module_history ]; then
      mkdir /var/state/lunar/module_history
    fi
    mod_v_safe_edit $MODULE                             &&
    SCRIPT_DATE=$(date -u +%Y%m%d)                      &&
    MH_NAME=$MOD_V_SNAME-$VERSION-$SCRIPT_DATE.tar.bz2  &&
    cd $MOONBASE/$SECTION                               &&
    tar -cjf /var/state/lunar/module_history/$MH_NAME $MODULE
  )
  if [ -s $SCRIPT_DIRECTORY/POST_INSTALL ] ; then
    run_module_file $MODULE POST_INSTALL
  fi
}


