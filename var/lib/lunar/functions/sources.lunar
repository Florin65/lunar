############################################################
#                                                          #
# This code is written for Lunar Linux, see                #
# http://www.lunar-linux.org                               #
#                                                          #
############################################################
#                                                          #
# $FUNCTIONS/sources                                       #
# includes sources, md5_verify_source                      #
#                                                          #
# 20020604                                                 #
#                                                          #
############################################################
#                                                          #
# Copyrighted Kagan Kongar 2002 under GPLv2                #
#                                                          #
############################################################


# function : sources
# usage    : sources <module_name> {MD5}
# purpose  : displays the filenames and md5sums of sources for a given module
sources() { (
  MAX_SOURCES=${MAX_SOURCES:=100}

  if ! run_details $1 ; then
    return 1
  fi

  for (( CNT=0; CNT<=$MAX_SOURCES; CNT++ )) ; do
    TEMP=SOURCE$((CNT))
    TEMP=${TEMP/SOURCE0/SOURCE}

    eval SRC1=\$${TEMP}
    if [ "$2" == "MD5" ] ; then
      eval SRC_MD5=\$${TEMP}_MD5
      if [ -z "$SRC_MD5" ] ; then
        SRC_MD5=0
      fi
    fi

    eval SRC2=\$SOURCE$((CNT+1))
    eval SRC3=\$SOURCE$((CNT+2))

    if [ -n "$SRC1" ] ; then
      echo $SRC1
      if [ "$2" == "MD5" ] ; then
        echo $SRC_MD5
      fi
    fi

    #if two consequtive empty sources, then break
    [ -z "$SRC2" ] && [ -z "$SRC3" ] && {
      break
    }
  done
) }


# function : md5_verify_source
# usage    : md5_verify_source filename_1 md5_1, filename_2 md52.....
# purpose  : md5 verifies a filename
md5_verify_source() {
  ALL_OK=true   
  while [ -n "$2" ]
  do
    if ! verify_source $1 ; then
      return 1
    fi

    if [ "$2" == "0" ] ; then
      TEMP=0
    else
      verbose_msg "checking md5sum of \"$1\""
      TEMP=$(md5sum $SOURCE_CACHE/$1 | cut -d " " -f 1-1)
    fi
      
    if [ "$TEMP" != "$2" ] ; then 
       message  "${PROBLEM_COLOR}! Wrong md5 sum for ${FILE_COLOR}${1}${DEFAULT_COLOR}"
       message  "${PROBLEM_COLOR}Removing ${FILE_COLOR}${SOURCE_CACHE}/${1}${DEFAULT_COLOR}"
       rm -f $SOURCE_CACHE/$1 2>/dev/null                             &&
       message  "${FILE_COLOR}Removed${DEFAULT_COLOR}"              ||
       message  "${PROBLEM_COLOR}Unable to remove${DEFAULT_COLOR}" 
       ALL_OK=false
    fi

    shift 2
  done
  $ALL_OK
}


unpack() {

    FILENAME=`guess_filename  $SOURCE_CACHE/$1`          &&
  COMPRESSOR=`file  -b  $FILENAME  |  cut  -d ' '  -f1`  &&

  verbose_msg "Unpacking \"$FILENAME\" in \"$(pwd)\""

  case  $COMPRESSOR  in
        bzip2)  bzip2  -cdf  $FILENAME  |  tar  -xf  -  ;;
         gzip)  gzip   -cdf  $FILENAME  |  tar  -xf  -  ;;
    compress*)  gzip   -cdf  $FILENAME  |  tar  -xf  -  ;;
          Zip)  unzip  -q    $FILENAME                  ;;
          RPM)  rpmunpack  < $FILENAME  |  gzip  -d     \
                                        |  cpio  -idm   ;;
            *)  false                                   ;;
  esac

  if [ $? != 0 ] ; then
    message "${PROBLEM_COLOR}! Error while unpacking ${FILE_COLOR}$SOURCE_CACHE/$1${DEFAULT_COLOR}${PROBLEM_COLOR}${DEFAULT_COLOR}"
    return 1
  fi
  
  [ -n "$SOURCE_DIRECTORY" ] &&
  [ -d "$SOURCE_DIRECTORY" ]
  
  if [[ $(echo $CFLAGS | grep fbranch-probabilities) ]]; then
    chown -R 777 $SOURCE_DIRECTORY 2>&1 >/dev/null
  else
    chown -R root:root $SOURCE_DIRECTORY 2>&1 >/dev/null 
  fi
}



