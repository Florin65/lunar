#!/bin/bash
############################################################
#                                                          #
# install.lunar - install Lunar modules                    #
#                                                          #
############################################################
# cast is part of the sorcery spell management utility     #
# Copyright 2001 by Kyle Sallee                            #
############################################################
#                                                          #
# this WAS the cast script of a source based Linux distro, #
# calls Sorcerer GNU/Linux, or SGL. SGL is no longer       #
# available with GPL license. Since this script was taken  #
# before licensing scheme change, no legal problems I      #
# guess.                                                   #
#                                                          #
# the code is re-written for Lunar. The previous Copyright #
# notices are kept; just in case some code is left :=)     #
# Kagan Kongar <kongar@tsrsb.org.tr>, 20020519             #
#                                                          #
############################################################
#                                                          #
# Parts Copyrighted Jason Johnston  2002 under GPLv2       #
#                                                          #
# Parts Copyrighted Kagan Kongar 2002 under GPLv2          #
#                                                          #
############################################################


check_blacklist() {
  debug_msg "check_blacklist ($@)"
  #Copyrighted Jason Johnston  2002 under GPLv2

  # This checks the /var/state/lunar/gcc.<platform>
  # file to see if it exists.  If it does exist then
  # we grep it to see the names of the modules that
  # DO NOT compile with gcc 3x.  If the module is
  # on the list, we set the path so that gcc 3x is
  # NOT used.

  # If you find a module that does not compile with
  # gcc 3x please email your findings to
  # maintainer@lunar-linux.org.

  # Usage check_checklist $MODULES
  if [ -z "$PLATFORM" ] ; then
    PLATFORM=x86
  fi
  if [ -f /var/state/lunar/blacklist.$PLATFORM ] ; then
    BLKLST=$(grep ^$MODULE$ /var/state/lunar/blacklist.$PLATFORM)
    if [ "$BLKLST" == "$MODULE" ] ; then
      message "${PROBLEM_COLOR}! Module ${DEFAULT_COLOR}${MODULE_COLOR}$MODULE${DEFAULT_COLOR}${PROBLEM_COLOR} is blacklisted and will not be installed${DEFAULT_COLOR}"
      exit 0
    fi
  else
    touch /var/state/lunar/blacklist.$PLATFORM
  fi
}


run_conflicts() {
  debug_msg "run_conflicts ($@)"
  run_module_file $MODULE CONFLICTS
}


# create the dependency files if they do not exist
prepare_depends_status()  {
  debug_msg "prepare_depends_status ($@)"
  [ -f $DEPENDS_STATUS ]        || touch  $DEPENDS_STATUS
  [ -f $DEPENDS_STATUS_BACKUP ] || touch  $DEPENDS_STATUS_BACKUP
}


prepare_module_config()  {
  debug_msg "prepare_module_config ($@)"
  if [ ! -x "$MODULE_CONFIG" ] ; then
    touch $MODULE_CONFIG
    chmod a+x $MODULE_CONFIG
  fi
}


# run the CONFIGURE script
run_configure() {
  mod_v_safe_edit $MODULE
  debug_msg "run_configure ($@)"
  if [ -n "$RECONFIGURE" ];  then
    verbose_msg "Reconfiguring \"$MOD_V_SNAME\""
    rm -f $DEPENDS_CONFIG/$MOD_V_SNAME
    remove_depends $MODULE
  fi

  prepare_module_config

  if ! use_xinetd ; then
    if [ -n "$RECONFIGURE" ] || ! grep -q INITDSCRIPTS $MODULE_CONFIG ; then
      use_initd
    fi
  fi
  grep -q "^"$MODULE"\$" $TEMP_PREPAREDDEPS 2>/dev/null && return 0
  run_module_file $MODULE CONFIGURE
}


run_pre_build() {
  debug_msg "run_pre_build ($@)"
  message "${MESSAGE_COLOR}Building ${MODULE_COLOR}$MODULE${DEFAULT_COLOR}"

  cd $BUILD_DIRECTORY

  if verify_all_sources $MODULE ; then
    if [ -s $SCRIPT_DIRECTORY/PRE_BUILD ] ; then
      run_module_file $MODULE PRE_BUILD
    else
      if ! default_pre_build ; then
        return 1
      fi
    fi
  else
    return 1
  fi
}


stop_logging() {
  debug_msg "stop_logging ($@)"
 mod_v_safe_edit $MODULE 
  message  "${MESSAGE_COLOR}Creating"                        \
           "${FILE_COLOR}$COMPILE_LOGS/$MOD_V_SNAME-$VERSION.bz2"  \
           "${DEFAULT_COLOR}"

  bzip2 -9f < $C_LOG > $COMPILE_LOGS/$MOD_V_SNAME-$VERSION.bz2
  temp_destroy $C_LOG
  temp_destroy $C_FIFO
}


start_logging () {
  debug_msg "start_logging  ($@)"
 mod_v_safe_edit $MODULE 
  export C_LOG=$(temp_create "${MOD_V_SNAME}.compile-log")
  export C_FIFO=$(temp_create "${MOD_V_SNAME}.compile-fifo")

  # just remaking this as FIFO
  rm -f $C_FIFO
  mknod $C_FIFO p
  echo "Compile log for \"$MODULE\"-\"$VERSION\" Built on \"$(date  -u)\"" > $C_LOG

  activate_voyeur
}


activate_voyeur()  {
  debug_msg "activate_voyeur ($@)"
  if [ -z "$SILENT" ] ; then
    case $VOYEUR in
      on) tee -a $C_LOG < $C_FIFO              & ;;
       *) tee -a $C_LOG < $C_FIFO >/dev/null   & ;;
    esac
  else
    tee -a $C_LOG < $C_FIFO >/dev/null &
  fi
}


run_build()  {
  debug_msg "run_build ($@)"
  if [ -d "$SOURCE_DIRECTORY" ] ; then
    cd $SOURCE_DIRECTORY
  fi

  verbose_msg "building \"$MODULE\" version \"$VERSION\" in `pwd`"
  
  if [ -x ./configure ] || [ -x ./src/configure ] ; then
    if [ -f /var/lib/lunar/localsaconfig ]; then
      if [ -f /var/cache/config/$MODULE ] ; then
        message "${MESSAGE_COLOR}These are your current -- config options for module ${MODULE_COLOR}$MODULE"
        message "${FILE_COLOR}(/var/cache/config/$MODULE)"
        cat /var/cache/config/$MODULE
      fi
	  
      if query "Do you wish to add -- options to ./configure?" n ; then
        edit_file /var/cache/config/$MODULE
        OPTS="$OPTS $(cat /var/cache/config/$MODULE)"
        message "${MESSAGE_COLOR} OPTS= ${MODULE_COLOR}$OPTS"
      fi
    fi
  fi

  if [ -s $SCRIPT_DIRECTORY/BUILD ] ; then
    run_module_file $MODULE BUILD
  else
    default_build
  fi

}


run_post_build() {
  debug_msg "run_post_build ($@)"
  if [ -s $SCRIPT_DIRECTORY/POST_BUILD ] ; then
    run_module_file $MODULE POST_BUILD
  fi
  default_post_build
}


run_post_install() {
  debug_msg "run_post_install ($@)"
  if [ -s $SCRIPT_DIRECTORY/POST_INSTALL ] ; then
    run_module_file $MODULE POST_INSTALL
  fi
}


export_ld()  {
  debug_msg "export_ld ($@)"
  for  DIRECTORY  in  $*;  do
    if  file  -b  $DIRECTORY/*.so*  |
        grep  -q  "shared object"
    then
      if  [  -z  "$LD_LIBRARY_PATH"  ]
      then  export  LD_LIBRARY_PATH="$DIRECTORY"
      else  export  LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$DIRECTORY"
      fi
    fi
  done
}



show_owner()  {
  debug_msg "show_owner ($@)"
  OWNER=`grep  $TARGET  $INSTALL_LOGS/*  |
         cut  -d :  -f1                  |
         sed  -n  1p`
  if  [  -n  "$OWNER"  ];  then  echo  "`basename  $OWNER`"
                           else  echo  "nobody"
  fi
}


remove_line()  {
  debug_msg "remove_line ($@)"
  F_TMP=$(temp_create "${MODULE}.remove-line")
  cp $I_LOG $F_TMP
  grep -v $ITEM $F_TMP > $I_LOG
  temp_destroy $F_TMP

  message  "Symbolic link: ${SYMLINK_COLOR}${ITEM}${DEFAULT_COLOR}"  \
           "is owned by ${MODULE_COLOR}${MODULE}${DEFAULT_COLOR}"
  message  "Target of symbolic link is ${FILE_COLOR}${TARGET}${DEFAULT_COLOR}"
  message  "${FILE_COLOR}${TARGET}${DEFAULT_COLOR} is owned by `show_owner`"
  message  "Removed: ${SYMLINK_COLOR}${ITEM}${DEFAULT_COLOR} from ${I_LOG}"
}


resurrect()  {
(
  debug_msg "resurrect ($@)"

  if [ -s /etc/lunar/local/optimizations ] ; then
    . /etc/lunar/local/optimizations
  fi
  if ! run_details $1 ; then
    return 1
  fi
  run_conflicts    &&
  satisfy_depends  &&

  STATUS=installed &&

  if module_held $MODULE ; then
    VERSION=`installed_version $MODULE`
    STATUS=held
    lrm --keepconfig $MODULE
  fi &&

  CACHE_BZ="$INSTALL_CACHE/$MODULE-$VERSION-$BUILD.tar.bz2"

  if [ -f "$CACHE_BZ" ] && bzip2 -tf $CACHE_BZ ; then
    message  "${RESURRECT_COLOR}Resurrecting ${MODULE_COLOR}${MODULE}${DEFAULT_COLOR} ${MESSAGE_COLOR}version ${VERSION_COLOR}${VERSION}${DEFAULT_COLOR}"
    bzip2 -cd $CACHE_BZ | tar -Pkx 1>/dev/null 2>&1
    add_module $MODULE $STATUS $VERSION &&
    verbose_msg "running \"lunar fix $MODULE\"" &&
    if run_fix $MODULE ; then
      report $INSTALL_LOGS/$MODULE-$VERSION "install log" $MODULE $VERSION &&
      sound SUCCESS
      activity_log  "lin"  "$MODULE"  "$VERSION"  "success"  "resurrected"
      message  "${RESURRECT_COLOR}Resurrected ${MODULE_COLOR}${MODULE}${DEFAULT_COLOR} ${MESSAGE_COLOR}succesfully${DEFAULT_COLOR}"
    else
      sound FAILURE
      activity_log  "lin"  "$MODULE"  "$VERSION"  "failed"  "resurrect failed"
      false
    fi
  else
    sound FAILURE
    activity_log  "lin"  "$MODULE"  "$VERSION"  "failed"  "resurrect failed"
    false
  fi
)
}


show_download_progress()  {
  debug_msg "show_download_progress ($@)"
  if [ -f "$TEMP_DOWNLOADLOG" ] ; then
    if [ -z "$LC_OLD" ] ; then
      LC_OLD=0
    fi

    LC=`cat $TEMP_DOWNLOADLOG 2>/dev/null | wc -l | tr -d ' '`

    if [ "$LC" != "$LC_OLD" ] ; then
      (( LC_OLD++ ))
      sed  -n ${LC_OLD},${LC}p $TEMP_DOWNLOADLOG
      LC_OLD=$LC
    fi
  fi
}


show_downloading() {
  debug_msg "show_downloading ($@)"
  if [ -e "$TEMP_DOWNLOADLOG" ] ; then
    verbose_msg "====== download progess:"
    while ! lget $MODULE >> $TEMP_DOWNLOADLOG 2>&1 ; do
      show_download_progress
      sleep 1
    done
    show_download_progress
    verbose_msg "====== end download progress"
  fi
}



lin_module()  {
(
  debug_msg "lin_module ($@)"
  # make sure we got all the info
  if ! run_details $1 ; then
    return 1
  fi

  # resurrect if we can, but not is -c was issued
  if [ "$AUTORESURRECT" == "on" -a -z "$COMPILE" ] ; then
    # we also do not resurrect if $MODULE is currently installed!
    if ! module_installed $MODULE ; then
      if resurrect $MODULE ; then
        return 0
      fi
    fi
  fi

  # make sure we have the source code
  lget $MODULE
  
  # set the installwatchfile
  export INSTALLWATCHFILE=$(temp_create "$MODULE.installwatch")

  # lock the module for installation, check for moonbase call
 mod_v_safe_edit $MODULE 
  linING="/var/lock/installing.$MOD_V_SNAME"
  if [ "$MODULE" == "moonbase" ] ; then
    if ! current_locked && ! solo_locked ; then
      echo $$ > $linING       &&
      lget moonbase           &&
      rm -f $linING           &&
      return
    else
      exit 1
    fi
  fi
  check_blacklist             &&
  
  # here we run CONFLICTS, DEPENDS and CONFIGURE stuff
  run_conflicts               &&
  satisfy_depends             &&
  show_downloading            &&

  # now entering the physical BUILD stage
  if ! current_locked && ! solo_locked ; then
    echo $$ > $linING  &&
    start_logging  &&

    if ! run_pre_build ; then
      LIN_ERROR="PRE_BUILD"
    else

      # important stuff here!!!
      invoke_installwatch &&
      if [ -z "$CFLAGS" ] ; then
        optimize
      fi  &&
      
      if ! run_build ; then
        LIN_ERROR="BUILD"
      else
        if ! run_post_build ; then
          LIN_ERROR="POST_BUILD"
	fi
      fi
    fi

    devoke_installwatch
    stop_logging
    
    if [ -n "$LIN_ERROR" ] ; then
      if [ -f "$INSTALLWATCHFILE" ] ; then
        temp_destroy $INSTALLWATCHFILE
      fi
      sound FAILURE
      message "${PROBLEM_COLOR}! Problem detected during ${FILE_COLOR}$LIN_ERROR${DEFAULT_COLOR}"
      rm -f $linING
      report $COMPILE_LOGS/$MOD_V_SNAME-$VERSION.bz2 "compile log" $MODULE $VERSION
      activity_log  "lin"  "$MODULE"  "$VERSION"  "failed" "Due to build errors during $LIN_ERROR"
      return 1
    fi  

    if ! boost ; then
      LIN_ERROR="boost"
    else
      if ! run_post_install ; then
        LIN_ERROR="POST_INSTALL"
      fi
    fi
    if [ -f "$INSTALLWATCHFILE" ] ; then
      verbose_msg "removing installwatch file"
      temp_destroy $INSTALLWATCHFILE
    fi

    if [ -n "$LIN_ERROR" ] ; then
      sound FAILURE
      message "${PROBLEM_COLOR}! Problem detected during ${FILE_COLOR}$LIN_ERROR${DEFAULT_COLOR}"
      rm -f $linING
      report $COMPILE_LOGS/$MOD_V_SNAME-$VERSION.bz2 "compile log" $MODULE $VERSION
      activity_log  "lin"  "$MODULE"  "$VERSION"  "failed" "Due to build errors during $LIN_ERROR"
      return 1
    fi

    rm_source_dir               &&
    report $INSTALL_LOGS/$MOD_V_SNAME-$VERSION "install log" $MODULE $VERSION &&
    rm -f $linING               &&
    sound SUCCESS               &&
    activity_log  "lin"  "$MODULE"  "$VERSION"  "success"

    if [ "$?" != 0 ] ; then
      sound FAILURE
      message "${PROBLEM_COLOR}! Problem detected${DEFAULT_COLOR}"
      rm -f $linING
      report $COMPILE_LOGS/$MOD_V_SNAME-$VERSION.bz2 "compile log" $MODULE $VERSION
      activity_log  "lin"  "$MODULE"  "$VERSION"  "failed" "Due to build errors during or after $LIN_ERROR"
      return 1
    fi
  fi
)
}


lin_locked()  {
  debug_msg "lin_locked ($@)"
  [     -f        /var/lock/installing.$1  ]  &&
  ps        `cat  /var/lock/installing.$1`    |
  grep  -q  "lin"
}


solo_locked()  {
  debug_msg "solo_locked ($@)"
  for SOLO_MODULE in `cat $SOLO` ; do
    if lin_locked $SOLO_MODULE ; then
      message  "${PROBLEM_COLOR}lining${DEFAULT_COLOR}"  \
               "of other modules is disabled during a"     \
               "lin ${MODULE_COLOR}${SOLO_MODULE}"         \
               "${DEFAULT_COLOR}"
      return
    fi
  done
  false
}


current_locked() {
  debug_msg "current_locked ($@)"
  if  lin_locked  $MODULE;  then
    message  "${QUERY_COLOR}Detected lin lock file: ${FILE_COLOR}${linING}${MESSAE_COLOR}"
    message  "${MESSAGE_COLOR}Now waiting for ${MODULE_COLOR}${MODULE}${DEFAULTT_COLOR}${MESSAGE_COLOR} to finish installing or for the lock to clear."

    while  lin_locked  $MODULE;  do  sleep  2;  done
    false
  else
    false
  fi
}


build_module_depends() {
(
  debug_msg "build_module_depends ($@)"
  run_details $1 &&
  run_configure &&
  run_depends &&
  satisfy_depends
)
}


build_depends()  {
  debug_msg "build_depends ($@)"
  for MODULE in $@ ; do
    if ! module_installed $MODULE || [ ! -n "$PROBE" ] ; then
      if ! module_held $MODULE ; then
        build_module_depends $MODULE
      else
        verbose_msg "Skipping dependency checking of held module \"$MODULE\""
      fi
    fi
  done
}



